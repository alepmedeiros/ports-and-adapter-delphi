Inspiracoes
https://www.youtube.com/watch?v=JufRR4GGkgA Base da palestra

https://www.youtube.com/watch?v=DWsxTJpxaOo&t=3s
https://www.youtube.com/watch?v=kCSiGeUFi_U&t=214s


para apresentações
https://engsoftmoderna.info/artigos/arquitetura-hexagonal.html#:~:text=Uma%20Arquitetura%20Hexagonal%20divide%20as,tais%20como%20bancos%20de%20dados).
https://br.sensedia.com/post/use-of-the-hexagonal-architecture-pattern
https://medium.com/tableless/desvendando-a-arquitetura-hexagonal-52c56f8824c
https://medium.com/@pjbgf/title-testing-code-ocd-and-the-aaa-pattern-df453975ab80
https://mbagrat.com/architecture/the-pattern-ports-and-adapters-hexagonal-architecture/

https://www.youtube.com/watch?v=or5zAOASPjU


Arquitetura Hexagonal ou ports and adapter

Objetivo é construir aplicações que vão se manter de uma forma melhor ao logo do tempo, nós iremos conseguir baixar o custo da manutenção, o objetivo de ter uma boa arquitetura é justamente ter um software melhor, se você quer construir aplicações de grande porte, em ser um desenvolvedor que de exelencia, é importante apreder esses conceitos.

Você acha que arquitetura hexanonal é indispensavel hoje em dia para o desenvolvimento, ou você acha que ainda consiga construir aplicações sem utilizar esse tipos de arquitetura e tenha uma aplicação sustentável, com baixo custo na manutenção.

Exemplo de um estacionamento, com entrada e saida, calcula o valor a ser pago.

Quando começamos a desenvolver, diante de uma tela em branco, devemos tomar uma decisão qual caminho seguir, é importante que busquemos experiencias profissionais e comecemos algo do zero.

Por que essa experiencia é relevante?

Você irá estar em uma possição, que irá te levar a tomar certas desições, e essas desições tem um custo e um beneficio, então de certa forma, agraga consideralmente na sua carreira.

Vamos para um modelagem simples:

Depomos olhar para caso de uso, que são o que entregamos de fato para o usuário final.

Então vamos lá:

Eu tenho:
	Carro estacionado
Esse carro estacionado, ele entra no estacionamento

domain: 

parked car

uses cases: (algo super neutro) aqui é api que a sua aplicação expoe, não é a api webservice, que você está usando

check-in (placa) ok
checkout (placa) : price
getParkedCars


o correto é começarmos orientado a teste, mas niguem de fato começa a implementar orientado a teste.

as pessoas no dia a dia tem muita necessidade de conectarem as pontas, isso é um mal, muita vezes nós temos essa inclunação de querer ver a coisa funcionando de ponta a ponta, e isso faz com que nós atropelamos as coisas.


começar a implementação que muitos já começam:

criar um projeto do zero, seguindo a ideia rad, e a forma erronea que muitos já fazem

vamos falar um pouco sobre ports and adapters

qual é o grande centro de ports and adapters?

a principal ideia é que você tenha uma aplicação que pode ser guiada por clientes diferentes, esse é um dos pontos.

como é que sou guiado por clientes diferente, eu posso ter uma api, posso ter uma fila, posso ter um CLI, uma user interface, diversos clientes.

Essa aplicação do jeito que está escrita, ela é guiavel por varios cliente? Não, ela só é guiada pela api, regras de negocio estão escritas na api

Quando pensamos em regra de negocio, podemos levar algumas coisas para a api, que é o seguinte:
quando saio com o carro, eu devo localizar, o checkout eu tenho que ideitificar um carro para que eu retorne um preço, pelo tempo que o carro permaneceu parado


===========================================================

Agora chegamos no ponto que queriamos:

repare que temos uma mistura, e para quem pensou em ports and adapter por volta de 1994, isso pode parecer para alguns algo inlusório, e outros já visto, mas isso acontece em diferentes niveis, na interface grafica, dentro de uma api, dentro de um package.

a ideia é que sua aplicação guiasse dispositivos de IO de forma mais livre, não deveria estar acoplado a um banco de dados especifico.

e nesse momento eu possuo dois problemas, eu não posso testar no nivel de application, pois fico amarrado a api, a um client, não podendo variar o dispositivo de entrada e saida, porque tenho a regra de negocio acoplada.

Esse é um territorio muito fertil para que possamos explorar, e agora podemos refatorar rumo a ports and adapter

=============================================================

Primeira coisa que tenho q fazer, qual é o usecase


domain: 

parked car

uses cases: (algo super neutro) aqui é api que a sua aplicação expoe, não é a api webservice, que você está usando

check-in (placa) ok
checkout (placa) : price
getParkedCars

é o checking.

a partir desse momento eu mudo completamente a interface, porque agora eu posso ter um checking de teste, não mais por meio de um client especifico, mas pela camada de aplicação, na borda do hexagono.
Se pensarmos no hexagono, as bordas que ele tem, uma delas é o checking


============================================================================================
Gatilho da refatoração que irá acontecer nesse momento

Foi falado que poderiamos ter diversos clientes conduzindo a aplicação que é o lado que mostro na figura

onde do lado esquedo temos os drivers side, que é uma pessoa, testes case, uma fila, um app mobile, coisas que podem guiar.

Nesse momento conseguimos alcançar esse ponto, eu tenho dependecia da borda da aplicação, das portas que estão sendo expostas.

Quando estou dentro da minha api, eu preciso mudar algumas coisas, onde o que estavamos fazendo não tem mais a necessidade de utiliza-las.

E o que eu tenho que fazer para mudar isso agora?  

aqui nós claramente exercitamos a possibilidade de trabalhar com dois clientes guiando a aplicação.

com damos uma flexibilizada na nossa aplicação, eu ainda estou em teste de integração, mas estou em menos camadas

================================================================================================

Agora se começarmos a olhar, existe um outro lado que é o driven side, se você observar, é como se tivessemos dois lado, um primario  e o outro secundário.

o guia, e o que é guiado.

do lado direito nós temos, uma série de dispositivos de entrada e saida, dispositivos de IO, dependencia de sistema operacional, e muito mais, entenda isso como filesystem, uma api que iremos usar, um banco de dados, qualquer coisa que você irá guiar.

na nossa aplicação, ainda que estejamos testando o use case de forma isolada, ainda que estejamos testando a borda da aplicação, eu não tenho a flexibilidade de dizer, não usa o banco de dados, ele vem junto e não se desasocia.

nós sabemos, assim espero que você saiba né, que não é uma boa prática misturarmos SQL com regra de negocio, igual fizemos, mas ainda que nós separemos, nem sempre conseguimos isolar esses mundos.

Nós não estamos necessáriamente usando Domain Driven Design, uma das coisas que o proprio Alistair Cockburn fala, é que, o que tem dentro do hexagonal, ele uma vez respondeu, tanto faz, o que você quiser, não precisa necessáriamente DDD
não precisa ser necessáriamente uma abordagem parecida clean archteture, você pode ter um código procedural do jeito que fiz.

Agora esse acoplamento com sql, ele está indo contra, dai eu não tenho independencia do mecanismo de entrada e saida.

depois de quebrarmos todos as classes, corrigindo, agora chegou a hora de criarmos a dependencia.

agora gerei a dependencia, que podemos ver do lado direito da nossa imagem

fizemos todas as implementações e refatoramos bastante coisa para chegamos ao padrão que estamos querendo


===================================================================================================

Em que é estamos no momento, na imagem

Sobre a ótica de ports and adapters, nós estamos bem, porque eu tornei independente, quem está guiando a aplicação, e como a aplicação é guiada.

tanto que, concorda que, podemos criar um ambiente de teste usando memory, sem ter que usar diretamente a nossa aplicação.

fizemos de forma simples, e nesse momento temos que ser capazes de alterar a inversão de dependencia, sem que atrapalhe o fluxo dos testes

o momento que eu inverto essa dependencia, e recebo essas dependencias dentro do meu usecase posso fazer o que bem entender, isso me tras segurança, me tras agilidades no teste.

eu não posso pegar uma api de produçõa de pagamentos e fazer o teste nela, eu irei usar algum fake.

e ai polimorficamente eu consigo passar uma dependencia diferente.

ai eu volto para dentro do hexagono.

nesse momento não estamos usando DDD, nem clean arch, não temos uma papel de uma entity, essas regras não são reuzaveis, elas não são jogadas dentro de um usecase, e ai ao olharmos para a imagem do clean arch

ai ao olharmos para a camada freamworks and drivers o horse, fdconnection, dentro da camada verde, não separamos ela mas temos os repositorios, poderiamos ter um roteador, e na camada vermelha os usescases, e no meio entitys, mas não temos as entitys, não estamos reusando nada.

=====================================================================================================